First thing i noticed right off the bat, is that this is very similar to assembly.
And although we are not dealing with hardware and registers fundamentally it is 
very similar. Im decent at assembly language so the first part of this chpater
moves fast. 

3:17 PM Gonna go watch all the lectures on this topic

6:58 PM just watched all the lectures related to this topic

Starting on exercises now

the only excersize that we were being graded on that I had problems with 
is the exptontential-recursion problem. Although my logic seemed correct my code
was not working properly. I realized it was the order of my problems and I just posted
about it on piazza. Going to read about it more now. Have a feeling is it due 
to the way that things are called off the stack.

Exercise 5.8
- In this problem we are asked to Modify the extract-labels procedure so that the assembler
will signal an error if the same label name is used to indicate two different
locations.

- step1- we need to understand exactly what extract labels does we understand 
from the code that extracts labels creates two lists. A list of labels where each 
label is paired with the instructions it refers too, and secondly a list of instructions
where the labels have been removed from this list and each instruction is paired with
the empty list. 

- I this point in the semester I can confidently say that I am going to be searching 
through a list in order to see if a label exists. Will have to break down the code and 
try to parse certain areas of it in the shell so I can find what list I want to search 
and what part I need to parse.

-some methods to check if elements exist in a list

-members?
-assoc

-trying to decipher each corner of this code. 
-the following is from the shell where we displayed next-insts 

Next insts: end
Next insts: (goto (label loop))
Next insts: (assign counter (op +) (reg counter) (const 1))
Next insts: (assign product (op +) (reg product) (reg temp))
Next insts: (assign temp (op *) (reg counter) (reg product))
Next insts: (branch (label end))
Next insts: (test (op =) (reg counter) (reg n))
Next insts: loop
Next insts: (assign counter (const 1))
Next insts: (assign product (const 1))
Next insts: start


-this is exactly my code but in reverse 
-going to comment out my other code and look at a smaller sample
yeah so i need to find where the labels are stored so i can compare it to insts

going to try to checking if next-inst is a member of labels and if true return a 
message else continue

member is not working need to find a new way to test my code. Lets print out what
we are comparing and when that does work, I will go through the documentatiion 
and test every method that checks if an element exists in a list. lets go throught the
documentation and test every method that checks for ek

https://docs.racket-lang.org/search/index.html?q=member

went through the list. figured member should work but it didnt and i was confident
that my logic was correct because I kepy displaying what needed to be printed. 

just read in the text

As it scans the text, it constructs both a list of instructions and a table that associates
each label with a pointer into that list, so we are going to need to use assoc because this is 
a table

Extract-labels takes as arguments a list text (the sequence of controller
instruction expressions) and a receive procedure. Receive will
be called with two values: (I) a list insts of instruction data structures,
each containing an instruction from text; and (2) a table called labels,

Thought about using the label table for 5.8 but i really need something that 
returns a boolean

pg 521 if an element is a symbol thus a label, so im going to move my check after the
(if symbol? in extract-label )

pg 528 

(define (instruction-text inst ) (car inst ) )
Instruction-text is not used by our simulator but is handy to use for debugging, keep in mind for 5.19

5.19 is causing major issues for me

Professor Nurit Hapsel told me in office hours the general logic of how to implement the breakpoints.
She told me it would take place in the execute procedure. I need to look for a breakpoint 

the pc register determines the sequencing of instructions as the machine runs. and 
sequencing is implemented by the internal procedure execute. The chapter on pc has been
super helpful in determing where the breakpoints should be located. IN each simulation model,
each machine instruction is a data structure that includes a procedure of no arguemnets,
called instruction execution procedure, such taht calling this procedure simulates executing the 
instruction. As the simulation tuns, pc points to the place in the instruction sequence beginning 
witht the next instruction to be executed. Execute gets that instruction and executes it by calling
the instruction execution procedure, and repeats this cycle until there are no more instructions 
to execute. 

in number 4 on the hints in the pdf she tells us we need to add labels in the assemble funciton.

I think one thing that needed a fair amount of thought is how I wanted to format my create breakpoints
function. I decided on a label instruction and n, which is the offset. Mainly because I want to try and 
see if I can do an (equal? instruction (content in pc)) to determine if I should execute or not. This would be 
helpful because then I wouldnt actually need to keep a total running number of instruction .

So what I did is put a let* break (breakpoint-inst ) which return my instruction for the break point.
I only set one break point so I can call the function with the car of the list (breakpoint) which is 
defined as a local list in make-new-machine. Anyways im going to make a global variable and keep comparing
breakpoint-inst, which is the specific instruction we want to break at. This method completely eliminates
the use of any counter and seems to be clean. 

I just tested this and it seems to work. I will make a separate procedure that will search a whole list 
of breakpoints for a match and although it will be inefficient at least it will work.
around that later will be easier than figuring out how to tell my program it is a break point. 

For some reason this will print out the value that the correction message that my execution is paused 
so i know it successfully reached this area of the code. But my execution was not paused it continued and 
i got incorrect results. But at least it is progroess. Well i realized that this might actually be right since
the execution is paused so the computation never completed. I left the same code in but ran it without 
breakpoints and it seemed to work ok. 

I think that when I execute my function again the old breakpoint is causing issues. I need a function to remove break
points it looks like.

I have bug in my code right now and it happens when I am resuming execution. When I resume execution the 
pc contents are in the right spot, right before the breakpoint instruction,  but when I proceed
my code checks my breakpoints against the first instruction and one exists so it stops execution. I need to 
find a way to move past that. I think if I remove the breakpoint from the list it should work ok. this
actually worked just need to make sure that I was actually changing the value of the break points.

becasue My breakpoint list as a local variable is just a list of instructions it is cause me problems to remove them.
if I type 

(cancel-breakpoint gcd-mac 'start 3)

-i need to fetch the instruction
-compare to the instructions in breakpoint
-if true, remove the instruction from break point

I seeem to code better if I write my thoughts down on these notes before attempting might make this a habit

See behind these walls is different. IM still the same old kid you used to knw